I"f<h3 id="creating-a-dummy-workspace">Creating a dummy workspace</h3>

<h3 id="subscribers-and-publishers">Subscribers and Publishers</h3>
<pre><code class="language-cpp">// ros::
</code></pre>

<pre><code class="language-python">
</code></pre>

<h4 id="subscribers-and-publishers-for-images-sensor-images">Subscribers and Publishers for images (Sensor Images)</h4>

<h5 id="inside-a-class">Inside a class</h5>

<h3 id="working-with-ros-bags">Working with ROS bags</h3>

<h5 id="view-the-images-from-rostopics----rqt_image_view">View the images from rostopics :- <code>$ rqt_image_view</code></h5>

<h5 id="visualize-the-bag-----rqt_bag-bagnamebag">visualize the bag  :- <code>$ rqt_bag bagname.bag</code></h5>

<h5 id="play-the-bag----rosbag-play-bagnamebag">Play the bag :- <code>$ rosbag play bagname.bag</code></h5>

<h5 id="play-the-bag-in-loop----rosbag-play-bagnamebag---loop">Play the bag in loop :- <code>$ rosbag play bagname.bag --loop</code></h5>

<h5 id="record-a-bag----rosbag-record--a">Record a bag :- <code>$ rosbag record -a</code></h5>

<h4 id="convert-videos-to-rosbags-">Convert Videos to Rosbags :</h4>

<pre><code class="language-python">import time, sys, os
from ros import rosbag
import roslib, rospy
roslib.load_manifest('sensor_msgs')
from sensor_msgs.msg import Image

from cv_bridge import CvBridge
import cv2

TOPIC = 'camera/left/image' # name of the topic

def CreateVideoBag(videopath, bagname):
    '''Creates a bag file with a video file'''
    bag = rosbag.Bag(bagname, 'w')
    cap = cv2.VideoCapture(videopath)
    cb = CvBridge()
    prop_fps = 30#cap.get(cv2.cv.CV_CAP_PROP_FPS)
    if prop_fps != prop_fps or prop_fps &lt;= 1e-2:
        print "Warning: can't get FPS. Assuming 24."
        prop_fps = 24
    ret = True
    frame_id = 0
    while(ret):
        ret, frame = cap.read()
        if not ret:
            break
        stamp = rospy.rostime.Time.from_sec(float(frame_id) / prop_fps)
        frame_id += 1
        image = cb.cv2_to_imgmsg(frame, encoding='bgr8')
        image.header.stamp = stamp
        image.header.frame_id = "camera"
        bag.write(TOPIC, image, stamp)
    cap.release()
    bag.close()

if __name__ == "__main__":
    videopath = 'video_09_09_21.avi'
    bagname = 'video_09_09_21.bag'
    CreateVideoBag(videopath, bagname)
</code></pre>

<h4 id="convert-rosbags-to-videos-or-frames">Convert Rosbags to Videos or Frames:</h4>
<pre><code class="language-python">
</code></pre>
<h5 id="video-generation-from-bag-to-avi-directly">video generation from bag to avi directly.</h5>

<h6 id="in-terminal-1---rosrun-image_view-video_recorder-imagecameraleftimage-_filenamecar_frontavi-_fps28-_codeci420">In terminal 1 :- <code>rosrun image_view video_recorder image:=/camera/left/image _filename:=car_front.avi _fps:='28' _codec:='I420'</code></h6>

<h6 id="in-terminal-2---rosbag-play-bagnamebag">In terminal 2 :- <code>rosbag play bagname.bag</code></h6>

<h4 id="extracts-images-from-the-bag-file">Extracts images from the bag file</h4>

<h6 id="in-terminal-1---rosrun-image_view-extract_images-_sec_per_frame041-imagecameraleftimage">In terminal 1 :- <code>rosrun image_view extract_images _sec_per_frame:=0.41 image:=/camera/left/image</code></h6>

<h6 id="in-terminal-2---rosbag-play-bagnamebag-1">In terminal 2 :- <code>rosbag play bagname.bag</code></h6>

<h4 id="read-messages-from-rosbag-and-write-to-a-csv-file">Read messages from rosbag and write to a CSV file</h4>
<pre><code class="language-python">import rosbag

bag = rosbag.Bag('/home/madhu/work/avi_read/refinement_test_videos/2019-10-18-11-11-02.bag')
topics = bag.get_type_and_topic_info()[1].keys()
print(topics)

speed_file = open("/home/madhu/work/avi_read/car_back_small.csv", "w")
if speed_file:
	count = 0
	for topic, msg, t1 in bag.read_messages():
		count += 1
		if topic  == '/an_spatial/GPSfix' and count%2 == 0 :
			# speed_file.write( str(msg.data) + "\n" + str(msg.data) + "\n" + str(msg.data) + "\n" + str(msg.data) + "\n" + str(msg.data) + "\n" +str(msg.data) + "\n" + str(msg.data) + "\n" + str(msg.data) + "\n" + str(msg.data) + "\n" + str(msg.data) + "\n")
			speed_file.write(str(msg.speed) + "\n")
			print("count : ", count)
</code></pre>
:ET