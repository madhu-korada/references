I"!	<h4 id="basic-commands">BASIC COMMANDS:</h4>

<p>Listing all the ports :- <code>$ python -m serial.tools.list_ports</code></p>

<p>Accessing ports :- <code>$ python -m serial.tools.miniterm &lt;port_name&gt;</code></p>

<h4 id="python">PYTHON:</h4>

<h5 id="read-from-serial-port">Read From Serial Port:</h5>
<pre><code class="language-python">import serial

ser = serial.Serial(
    port='/dev/ttyUSB0',\
    baudrate=9600,\
    parity=serial.PARITY_NONE,\
    stopbits=serial.STOPBITS_ONE,\
    bytesize=serial.EIGHTBITS,\
        timeout=0)

print("connected to: " + ser.portstr)

while True:
    # using ser.readline() assumes each line contains a single reading
    # sent using Serial.println() on the Arduino
    reading = ser.readline().decode('utf-8')
    # reading is a string...do whatever you want from here
    print(reading)

ser.close()
</code></pre>
<h6 id="to-read-given-number-of-bytes-from-the-serial-device">to read given number of bytes from the serial device</h6>
<pre><code class="language-pyhton">data = ser.read(size=5)
</code></pre>
<h6 id="to-read-the-data-from-serial-device-while-something-is-being-written-over-it">to read the data from serial device while something is being written over it.</h6>
<pre><code class="language-python">#for python2.7
data = ser.read(ser.inWaiting())

#for python3
ser.read(ser.inWaiting)

</code></pre>

<h5 id="write-to-serial-port-update-it">Write To Serial Port: (update it)</h5>
<pre><code class="language-python">import serial
import time

ser = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, bytesize=EIGHTBITS)  # open serial port
print(ser.name)         # check which port was really used
ser.write(b'hello')     # write a string
time.sleep(0.1)
ser.close()             # close port
</code></pre>
<h4 id="cpp">CPP:</h4>

<h5 id="open-read-and-write-to-a-serial-port">Open, Read and Write to a Serial Port:</h5>

<p>The entire cpp code to open, read and write into a serial port is updated in serial_cpp which is inside serial_and_IO folder. check it out <a href="https://github.com/madhu-korada/references/tree/master/serial_and_IO/serial_cpp">here</a></p>

<p>Using slcan radar data was parsed through USB-CAN interface. Check out the readme and code <a href="https://github.com/madhu-korada/references/tree/master/serial_and_IO/USB-CAN_radar_parser">here</a></p>
:ET